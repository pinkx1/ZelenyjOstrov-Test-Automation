import { request } from '@playwright/test';
import type {
    FullConfig,
    FullResult,
    Reporter,
    Suite,
    TestCase,
    TestResult,
} from '@playwright/test/reporter';

class MyReporter implements Reporter {
    private passedTests: any[] = [];
    private failedTests: any[] = [];

    onTestEnd(test: TestCase, result: TestResult) {
        const testResult = {
            "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞": test.title,
            "–°—Ç–∞—Ç—É—Å": result.status === 'passed' ? '‚úÖ –£—Å–ø–µ—à–Ω–æ' : '‚ùå –ù–µ—É—Å–ø–µ—à–Ω–æ',
            "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∞": this.formatDuration(result.duration),
            "–û—à–∏–±–∫–∏": result.errors.map(error => ({
                "–û—à–∏–±–∫–∞": this.cleanErrorMessage(error.message),
            })),
        };

        if (result.status === 'passed') {
            this.passedTests.push(testResult);
        } else {
            this.failedTests.push(testResult);
        }
    }

    async onEnd(result: FullResult) {
        const endpoint = process.env.ENDPOINT_FOR_REPORT;
        const requestContext = await request.newContext();

        try {
            const response = await requestContext.post(endpoint, {
                data: {
                    "–û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç": {
                        "–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤": this.passedTests.length + this.failedTests.length,
                        "–£—Å–ø–µ—à–Ω–æ": this.passedTests.length,
                        "–ù–µ—É—Å–ø–µ—à–Ω–æ": this.failedTests.length,
                    },
                    "–£—Å–ø–µ—à–Ω—ã–µ –¢–µ—Å—Ç—ã": this.passedTests,
                    "–ù–µ—É—Å–ø–µ—à–Ω—ã–µ –¢–µ—Å—Ç—ã": this.failedTests.length > 0 ? this.failedTests : '–í—Å–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã üéâ',
                },
            });

            if (response.ok()) {
                console.log('–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
            } else {
                console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞: ${response.status()}`);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞:', error);
        }

        await requestContext.dispose();
    }

    private cleanErrorMessage(message: string) {
        return message.replace(/\u001b\[\d{1,2}m/g, '').trim(); // –£–±–∏—Ä–∞–µ–º —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã ANSI
    }

    private formatDuration(ms: number) {
        const totalSeconds = Math.floor(ms / 1000);
        const hours = Math.floor(totalSeconds / 3600);
        const minutes = Math.floor((totalSeconds % 3600) / 60);
        const seconds = totalSeconds % 60;

        let durationString = '';

        if (hours > 0) {
            durationString += `${hours} —á `;
        }
        if (minutes > 0) {
            durationString += `${minutes} –º–∏–Ω `;
        }

        durationString += `${seconds} —Å–µ–∫`;

        return durationString.trim();
    }
}

export default MyReporter;
